import logging
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from datetime import datetime, timedelta
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
import logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)


# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
BOT_TOKEN = '7633388264:AAG890LBISxHwxXjKM__IaX5aqa_lBa9Cqk'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('tasks.db', check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS tasks (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    category TEXT,
    task TEXT,
    is_completed INTEGER DEFAULT 0,
    FOREIGN KEY (user_id) REFERENCES users (user_id)
)
''')

# –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –¥–æ–±–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–æ–ª–±—Ü–∞ is_completed
cursor.execute('PRAGMA table_info(tasks)')
columns = [column[1] for column in cursor.fetchall()]
if 'is_completed' not in columns:
    cursor.execute('ALTER TABLE tasks ADD COLUMN is_completed INTEGER DEFAULT 0')
    conn.commit()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM (Finite State Machine)
class TaskStates(StatesGroup):
    waiting_for_category = State()
    waiting_for_task = State()
    waiting_for_category_to_delete = State()
    waiting_for_task_to_delete = State()
    waiting_for_category_to_change = State()
    waiting_for_task_to_change_category = State()
    waiting_for_new_category = State()
    waiting_for_task_to_select = State()
    waiting_for_task_to_mark_complete = State()
    waiting_for_category_to_mark_complete = State()
    waiting_for_task_to_mark_complete = State()
    waiting_for_edit_note = State()
    waiting_for_edit_choice = State()
    waiting_for_new_title = State()
    waiting_for_new_text = State()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def create_keyboard(buttons):
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=btn)] for btn in buttons],
        resize_keyboard=True
    )

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
def confirm_category_delete_keyboard(category):
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"confirm_delete_cat_{category}"),
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="cancel_delete_cat")
        ]
    ])

async def check_state_timeout(state: FSMContext):
    data = await state.get_data()
    if 'last_activity' in data:
        last_activity = datetime.fromisoformat(data['last_activity'])
        if datetime.now() - last_activity > timedelta(minutes=5):
            await state.clear()
            return True
    return False
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∑–∞–º–µ—Ç–∫–∞–º–∏
def notes_inline_keyboard(notes):
    keyboard = []
    for note in notes:
        keyboard.append([InlineKeyboardButton(text=note[0], callback_data=f"note_{note[0]}")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
def edit_choice_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data="edit_title"),
         InlineKeyboardButton(text="üìù –¢–µ–∫—Å—Ç", callback_data="edit_text")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit")]
    ])

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è
@dp.callback_query(TaskStates.waiting_for_edit_choice, lambda c: c.data == "cancel_edit")
async def cancel_edit(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.clear()
    await callback.answer()

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    cursor.execute('INSERT OR IGNORE INTO users (user_id) VALUES (?)', (user_id,))
    conn.commit()
    keyboard = create_keyboard([
        "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É",
        "–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏",
        "–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É",
        "–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É",
        "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å"
    ])
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç!\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=keyboard,
        parse_mode='HTML'
    )

@dp.message(lambda message: message.text == "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å")
async def restart_bot(message: types.Message):
    await cmd_start(message)
    
async def get_category(message: types.Message, state: FSMContext, next_state: State):
    if await check_state_timeout(state):
        await message.answer("‚è≥ –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return
    
    await state.update_data(last_activity=datetime.now().isoformat())

    user_id = message.from_user.id
    cursor.execute('SELECT DISTINCT category FROM tasks WHERE user_id = ?', (user_id,))
    categories = cursor.fetchall()
    
    if categories:
        categories_list = "\n".join([f"{i + 1}. {category[0]}" for i, category in enumerate(categories)])
        await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:\n{categories_list}")
        await state.set_state(next_state)
        await state.update_data(user_id=user_id)
    else:
        await message.answer("–ó–∞–¥–∞—á –ø–æ–∫–∞ –Ω–µ—Ç.")
        await state.clear()
        
async def get_task(message: types.Message, state: FSMContext, next_state: State):
    try:
        logger.info(f"Entered get_task with state: {await state.get_state()}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        current_state = await state.get_state()
        if current_state is None:
            await message.answer("‚ö†Ô∏è –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞, –Ω–∞—á–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.")
            return

        # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        user_id = data.get("user_id")
        if not user_id:
            logger.error("User ID not found in state")
            await state.clear()
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Å—Å–∏–∏, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            category_number = int(message.text.strip()) - 1
        except ValueError:
            logger.warning("Invalid input - not a number")
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ <b>—á–∏—Å–ª–æ</b> –∏–∑ —Å–ø–∏—Å–∫–∞.", parse_mode='HTML')
            await state.clear()
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        cursor.execute('SELECT DISTINCT category FROM tasks WHERE user_id = ?', (user_id,))
        categories = [row[0] for row in cursor.fetchall()]
        
        if not categories:
            logger.warning("No categories found")
            await message.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            await state.clear()
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
        if not (0 <= category_number < len(categories)):
            logger.warning(f"Invalid category number: {category_number + 1} (max {len(categories)})")
            await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len(categories)}")
            await state.clear()
            return

        category = categories[category_number]
        logger.info(f"Selected category: {category}")

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        cursor.execute('SELECT id, task FROM tasks WHERE user_id = ? AND category = ?', (user_id, category))
        task_list = cursor.fetchall()
        
        if not task_list:
            logger.warning(f"No tasks in category: {category}")
            await message.answer(f"üì≠ –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>'{category}'</b> –∑–∞–¥–∞—á –Ω–µ—Ç.", parse_mode='HTML')
            await state.clear()
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        tasks_list = "\n".join([f"{i + 1}. {task[1]}" for i, task in enumerate(task_list)])
        await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏:\n{tasks_list}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(
            category=category,
            task_list=task_list,
            last_action=datetime.now().isoformat()
        )
        await state.set_state(next_state)
        logger.info(f"State updated to {next_state}")

    except sqlite3.Error as e:
        logger.error(f"Database error: {str(e)}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()
        
    except Exception as e:
        logger.error(f"Unexpected error: {str(e)}", exc_info=True)
        await message.answer("‚ö†Ô∏è –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É"
@dp.message(lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É")
async def add_task(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∑–∞–º–µ—Ç–∫–∏:")
    await state.set_state(TaskStates.waiting_for_category)
    await state.update_data(user_id=message.from_user.id)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.message(TaskStates.waiting_for_category)
async def process_category(message: types.Message, state: FSMContext):
    user_id = (await state.get_data()).get("user_id")
    category = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute('SELECT DISTINCT category FROM tasks WHERE user_id = ?', (user_id,))
    categories = [row[0] for row in cursor.fetchall()]
    
    if category in categories:
        # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        await message.answer(f"‚ùå –ó–∞–º–µ—Ç–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º <b>'{category}'</b> —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
        parse_mode='HTML')
        # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        return
    
    # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç, —Å–æ–æ–±—â–∞–µ–º, —á—Ç–æ –æ–Ω–∞ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞
    await message.answer(f"üéâ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞ <b>'{category}'</b>! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏:",
    parse_mode='HTML')
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –∑–∞–¥–∞—á–∏
    await state.update_data(category=category)
    await state.set_state(TaskStates.waiting_for_task)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∑–∞–¥–∞—á–∏
@dp.message(TaskStates.waiting_for_task)
async def process_task(message: types.Message, state: FSMContext):
    user_id = (await state.get_data()).get("user_id")
    data = await state.get_data()
    category = data.get("category")
    task = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute('SELECT DISTINCT category FROM tasks WHERE user_id = ?', (user_id,))
    categories = [row[0] for row in cursor.fetchall()]
    
    if category not in categories:
        # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ—ë
        await message.answer(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞ '{category}'.")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    cursor.execute('INSERT INTO tasks (user_id, category, task) VALUES (?, ?, ?)', (user_id, category, task))
    conn.commit()
    await message.answer(f"‚úÖ –¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∑–∞–º–µ—Ç–∫—É <b>'{category}'</b>:\n"
        f"‚ñ´Ô∏è <i>{task}</i>",
        parse_mode='HTML')
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏"
@dp.message(lambda message: message.text == "–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏")
async def show_tasks(message: types.Message):
    user_id = message.from_user.id
    cursor.execute('SELECT category, task, is_completed FROM tasks WHERE user_id = ?', (user_id,))
    tasks = cursor.fetchall()
    
    if tasks:
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        tasks_by_category = {}
        for category, task, is_completed in tasks:
            if category not in tasks_by_category:
                tasks_by_category[category] = []
            tasks_by_category[category].append(task)  
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = "üìÇ –í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏:\n\n"
        for category, tasks_list in tasks_by_category.items():
            response += f"üìÅ <b>{category}</b>\n"
            for task in tasks_list:
                response += f"  ‚îî {task}\n" 
            response += "\n"
        
        await message.answer(response, parse_mode='HTML')
    else:
        await message.answer("–ó–∞–º–µ—Ç–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.")

@dp.errors()
async def errors_handler(update: types.Update, exception: Exception):
    logger.error(f"Global error: {exception}")
    return True

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É"
@dp.message(lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É")
async def delete_note_start(message: types.Message):
    user_id = message.from_user.id
    cursor.execute('SELECT DISTINCT category FROM tasks WHERE user_id = ?', (user_id,))
    categories = [row[0] for row in cursor.fetchall()]
    
    if not categories:
        await message.answer("–ù–µ—Ç –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return
    
    # –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=cat, callback_data=f"delete_cat_{cat}")]
        for cat in categories
    ])
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
@dp.callback_query(lambda c: c.data.startswith("delete_cat_"))
async def process_delete_category(callback: types.CallbackQuery):
    category = callback.data.split("_", 2)[-1]
    
    await callback.message.edit_text(
        f"üóë –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–Æ –∑–∞–º–µ—Ç–∫—É <b>'{category}'</b>?\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
        parse_mode="HTML",
        reply_markup=confirm_category_delete_keyboard(category)
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.callback_query(lambda c: c.data.startswith("confirm_delete_cat_"))
async def process_confirm_delete_category(callback: types.CallbackQuery):
    category = callback.data.split("_", 3)[-1]
    user_id = callback.from_user.id
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    cursor.execute('DELETE FROM tasks WHERE user_id = ? AND category = ?', (user_id, category))
    conn.commit()
    
    await callback.message.edit_text(f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ <b>'{category}'</b> –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–∞!", parse_mode="HTML")
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.callback_query(lambda c: c.data == "cancel_delete_cat")
async def process_cancel_delete_category(callback: types.CallbackQuery):
    await callback.message.edit_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É"
@dp.message(lambda message: message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É")
async def edit_note_start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    cursor.execute('SELECT DISTINCT category FROM tasks WHERE user_id = ?', (user_id,))
    notes = cursor.fetchall()
    
    if not notes:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.")
        return
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:", 
                        reply_markup=notes_inline_keyboard(notes))
    await state.set_state(TaskStates.waiting_for_edit_note)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∑–∞–º–µ—Ç–∫–∏
@dp.callback_query(TaskStates.waiting_for_edit_note, lambda c: c.data.startswith("note_"))
async def process_note_selection(callback: types.CallbackQuery, state: FSMContext):
    note_title = callback.data.split("_")[1]
    await state.update_data(selected_note=note_title)
    await callback.message.answer(f"–í—ã–±—Ä–∞–Ω–∞ –∑–∞–º–µ—Ç–∫–∞: {note_title}\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
                                 reply_markup=edit_choice_keyboard())
    await state.set_state(TaskStates.waiting_for_edit_choice)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
@dp.callback_query(TaskStates.waiting_for_edit_choice)
async def process_edit_choice(callback: types.CallbackQuery, state: FSMContext):
    action = callback.data
    data = await state.get_data()
    note_title = data.get('selected_note')
    
    if action == "edit_title":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∑–∞–º–µ—Ç–∫–∏:")
        await state.set_state(TaskStates.waiting_for_new_title)
    elif action == "edit_text":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–º–µ—Ç–∫–∏:")
        await state.set_state(TaskStates.waiting_for_new_text)
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
@dp.message(TaskStates.waiting_for_new_title)
async def process_new_title(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()
    old_title = data.get('selected_note')
    new_title = message.text.strip()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å —Å—Ç–∞—Ä—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
    cursor.execute('UPDATE tasks SET category = ? WHERE user_id = ? AND category = ?',
                  (new_title, user_id, old_title))
    conn.commit()
    
    await message.answer(f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞:\n{old_title} ‚Üí {new_title}")
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
@dp.message(TaskStates.waiting_for_new_text)
async def process_new_text(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()
    note_title = data.get('selected_note')
    new_text = message.text.strip()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    cursor.execute('''UPDATE tasks SET task = ? 
                   WHERE user_id = ? AND category = ?''',
                  (new_text, user_id, note_title))
    conn.commit()
    
    await message.answer(f"‚úÖ –¢–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω –≤–æ –≤—Å–µ—Ö –∑–∞–ø–∏—Å—è—Ö:\n{new_text}")
    await state.clear()
     
@dp.message()
async def unhandled_message(message: types.Message):
    await message.answer(
        "‚ö†Ô∏è –ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.",
        reply_markup=create_keyboard([
            "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É",
            "–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏",
            "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å"
        ])
    )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
